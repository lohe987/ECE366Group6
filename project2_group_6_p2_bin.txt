
01010001 # set r0 = 1 temporarily
01010101 # set r1 = 1
01000101 # r1 = 1 + 1 = 2
01000100 # r1 = 2 + 1 = 3
01010011 # set r0 = -1
00010001 # set $r0 val of -1 into mem loc 3 which is 0x0003
01010001 # set r0 = 1 temporarily
01000100 # r1 = 3 + 1 = 4
01010011 # set r0 back to -1
00010001 # set $r0 val of -1 into mem loc 4 which is 0x0004
01010000 # reset r0 back to 0
01010100 # reset r1 back to 0

00010000 # r0 is already = 0, set $r0 val of 0 into mem loc 0 which is 0x0000
01010101 # set r1 to 1
00010101 # set $r1 val of 1 into mem loc 1 which is 0x0001
01010100 # reset r1 back to 0, r0 is still 0 at this point

00001000 # r0 is 0 at this point, r2 now = 0
00001100 # r0 is 0 at this point, r3 now = 0 

01001011 # $r2 = 0 + 3 = 3
01011010 # $r2 = 3 * 2^2 = 3 * 4 = 12
01001101 # $r3 = 0 + 2 = 2
00011011 # store r2 val of 12 into mem loc 2 or 0x0002
01001111 # r3 = 2 + 3 = 5
01010000 # set r0 = 0
00001000 # load 0 into r2 from mem loc 0 or 0x0000
00011011 # store 0 into mem loc 5
01001001 # r2 = 0 + 1 = 1
01001101 # r3 = 5 + 1 = 6
00011011 # store 1 into mem loc 6
01001001 # r2 = 1 + 1 = 2
01001101 # r3 = 6 + 1 = 7
00011011 # store 2 into mem loc 7
01001001 # r2 = 2 + 1 = 3
01001101 # r3 = 7 + 1 = 8
00011011 # store 3 into mem loc 8
01001001 # r2 = 3 + 1 = 4
01001101 # r3 = 8 + 1 = 9
00011011 # store 4 into mem loc 9
01001001 # r2 = 4 + 1 = 5
01001101 # r3 = 9 + 1 = 10
00011011 # store 5 into mem loc 10
01000101 # r2 = 5 + 1 = 6
01001101 # r3 = 10 + 1 = 11
00011011 # store 6 into mem loc 11
01001001 # r2 = 6 + 1 = 7
01001101 # r3 = 11 + 1 = 12
00011011 # store 7 into mem loc 12
01001001 # r2 = 7 + 1 = 8
01001101 # r3 = 12 + 1 = 13
00011011 # store 8 into mem loc 13
01001001 # r2 = 8 + 1 = 9
01001101 # r3 = 13 + 1 = 14
00011011 # store 9 into mem loc 14
01001001 # r2 = 9 + 1 = 10
01001101 # r3 = 14 + 1 = 15
00011011 # store 10 into mem loc 15
01001001 # r2 = 10 + 1 = 11
01001101 # r3 = 15 + 1 = 16
00011011 # store 11 into mem loc 16
01001001 # r2 = 11 + 1 = 12
01001101 # r3 = 16 + 1 = 17
00011011 # store 13 into mem loc 17
01001001 # r2 = 12 + 1 = 13
01001101 # r3 = 17 + 1 = 18
00011011 # store 14 into mem loc 18
01001001 # r2 = 13 + 1 = 14
01001101 # r3 = 18 + 1 = 19
00011011 # store 15 into mem loc 19
01001001 # r2 = 14 + 1 = 15
01001101 # r3 = 19 + 1 = 20
00011011 # store 16 into mem loc 20
01001001 # r2 = 15 + 1 = 16
01001101 # r3 = 20 + 1 = 21
00011011 # store 17 into mem loc 21
01001001 # r2 = 16 + 1 = 17
01001101 # r3 = 21 + 1 = 22
00011011 # store 18 into mem loc 22
01001001 # r2 = 17 + 1 = 18
01001101 # r3 = 22 + 1 = 23
00011011 # store 19 into mem loc 23
01001001 # r2 = 18 + 1 = 19
01001101 # r3 = 23 + 1 = 24
00011011 # store 20 into mem loc 24

01010000 # reset r0 = 0
01010100 # reset r1 = 0
00001000 # reset r2 = 0
00001100 # reset r3 = 0 

01001001 # registers are initially at 0, so r2 = 0 + 1 = 1
01011011 # r2 = r2 << 3 = 8
01011001 # r2 = r2 << 1 = 16
01001011 # r2 = 16 + 3 = 19
01001001 # r2 = 19 + 1 = 20
01001111 # r3 = 0 + 3 = 3
01001101 # r3 = 3 + 1 = 4
01001110 # r3 = 4 + 2 = 6
01000010 # r0 = 0 + 20 = 20
01000011 # r0 = 20 + 6 = 26, this is for the mem loc 
00011000 # store $r2 val of 20 into mem loc 26 which is 0x001A

01001011 # r2 = 20 + 3 = 23
01001011 # r2 = 23 + 3 = 26
01001001 # r2 = 26 + 1 = 27
01000011 # r0 = 26 + 6 = 32
00010010 # store $r0 val of 32 into mem loc 27 which is 0x001B

00101011 # r2 = 27 - 3 = 24
00101011 # r2 = 24 - 3 = 21
00101001 # r2 = 21 - 1 = 20

01010100 # set r1 = 0
00001101 # load val 0 from mem location 0 or 0x0000, r3 = 0
00101101 # r3 = 0 - 1 = -1 
01010100 # reset r1 to 0
01010000 # set r0 to 0


01010000 # always sets r0 to 0 first
01000010 # since r0 is always 0 beforehand, r0 = r2 everytime
01111110 # jump forward 2^6 to leave a_loop
00101001 # decrement r2
01001101 # increment r3
00000111 # load array value at mem loc 'r3' into r1; #load T val in 0x0002 into r0

01010001 # set r0 = 1
01000000 # r0 = 1 + 1 = 2
00000000 # load T from mem loc 0x0002 into r0, r0 now = T
01100001 # XOR of r0 and r1, store result into r0 
01010000 # set r0 = 0
00010100 # store XOR result into mem loc 0x0000 temporarily, overwriting '0'
01010001 # set r0 = 1
01000000 # r0 = 1 + 1 = 2
01000000 # r0 = 2 + 2 = 4
01000000 # r0 = 4 + 4 = 8
01000000 # r0 = 8 + 8 = 16
01000000 # r0 = 16 + 16 = 32
01010101 # set r1 = 1, used to decrement r0 by 1
00100001 # r0 = 32 - 1 = 31
01000101 # r1 = 1 + 1 = 2 
01000101 # r1 = 2 + 2 = 4
01000101 # r1 = 4 + 4 = 8
01000101 # r1 = 8 + 8 = 16
01000101 # r1 = 16 + 16 = 32
01000101 # r1 = 32 + 32 = 64
00010001 # store r0 val of 31 into mem loc 64; # store array element # in r3 into mem loc 28 or 0x001C

01000101 # r1 = 1 + 1 = 2
01000101 # r1 = 2 + 2 = 4
01010001 # set r0 = 1
01000000 # r0 = 1 + 1 = 2
01000000 # r0 = 2 + 2 = 4
01000000 # r0 = 4 + 4 = 8
01000000 # r0 = 8 + 8 = 16
01000000 # r0 = 16 + 16 = 32
00100001 # r0 = 32 - 4 = 28
00011100 # store r3 = array element # in mem loc 28
00001101 # load val 1 into r3 from mem location 0x0001
01010000 # set r0 = 0 for HD
01010101 # set r1 = 1
01000101 # r1 = 1 + 1 = 2 
01000101 # r1 = 2 + 2 = 4
01000101 # r1 = 4 + 4 = 8
01000101 # r1 = 8 + 8 = 16
01000101 # r1 = 16 + 16 = 32
00010001 # store HD into mem loc 32
01010101 # set r1 = 1 for masking


01010001 # set r0 = 1
01000000 # r0 = 1 + 1 = 2 
01000000 # r0 = 2 + 2 = 4
01000000 # r0 = 4 + 4 = 8
01000000 # r0 = 8 + 8 = 16
01000000 # r0 = 16 + 16 = 32
01000000 # r0 = 32 + 32 = 64
00000000 # load r0 val of 31 init stored in mem loc 64 back into r0
01111101 # jump forward 2^5 to leave m_loop
01010000 # set r0 = 0 so r3 can access mem loc 0x0000/XOR result
00001100 # r3 = XOR result which is stored in mem loc 0x0000
01101101 # AND the XOR result (r3) with masking value (r1)
01000101 # shift by 1 for mask value
01010000 # set r0 = 0 to compare with AND result
00111100 # check if $r0 = $r3, if so then r0 = -1
01111100 # jump back -2^4 to m_loop
01010001 # set r0 = 1
00001100 # load val 1 into r3 from mem location 0x0001
01000000 # r0 = 1 + 1 = 2 
01000000 # r0 = 2 + 2 = 4
01000000 # r0 = 4 + 4 = 8
01000000 # r0 = 8 + 8 = 16
01000000 # r0 = 16 + 16 = 32
00000000 # load HD into r0 from mem loc 32
01000011 # HD + 1 (r3)
01011111 # r3 = 1 << 3 = 8
01011110 # r3 = 8 << 2 = 32
00010011 # store incremented HD back to mem loc 32
01110111 # jumps back 2^7 to reach a_loop


01010000 # set r0 = 0
00010000 # set mem loc 0x0000 back to '0' overwriting XOR result

01010001 # set r0 = 1
01001111 # r3 = 1 + 3 = 4
01001101 # r3 = 4 + 1 = 5
01000000 # r0 = 1 + 1 = 2 
01000000 # r0 = 2 + 2 = 4
01000000 # r0 = 4 + 4 = 8
01000000 # r0 = 8 + 8 = 16
01000000 # r0 = 16 + 16 = 32
01010100 # set r1 = 0
01000100 # r1 = 0 + 32 = 32
00000000 # load HD into r0 from mem loc 32
00100100 # r1 = 32 - HD
00010100 # store x (which is 32 - HD) into mem loc 32, overwriting HD
01010000 # set r0 = 0
00001100 # load val '0' into r3
01001111 # r3 = 0 + 3 = 3
01010001 # set r0 = 1 to avoid next cases initially
00001111 # load best_matching_score val stored in mem loc 3 into r3
00110111 # if x < best_matching_score then R0 == 0
01111110 #jumps back 2^6 to a_loop;
00110111 # if x = best_matching_score then R0 == -1

01010000 # set r0 = 0
00001100 # load val '0' into r3
01001111 # r3 = 0 + 3 = 3
01001101 # r3 = 1 + 3 = 4
00001111 # load best_matching_count into r3 from mem loc 4
01001101 # r3 = best_matching_count + 1
01010001 # set r0 = 1
01000000 # r0 = 1 + 1 = 2
01000000 # r0 = 2 + 2 = 4
00011100 # store incremented best_matching_count back to mem loc 4
01111110 #jumps back 2^6 to a_loop;

01010001 # set r0 = 1
00001100 # load val '0' into r3
01001101 # r3 = 1 + 2 = 3
00000011 # reset best_matching_count to 1 at mem loc 3; # x is in mem loc 32

01010000 # set r0 = 0
00001100 # load val '0' into r3
01001111 # r3 = 0 + 3 = 3
01000011 # r3 = 0 + 3 = 3
00101110 # r3 = 3 - 2 = 1
01011111 # r3 = 1 << 3 = 8
01011110 # r3 = 8 << 2 = 32
00001111 # x stored in r3 from mem loc 32
00001100 # x replaces old best_matching_count with new one at mem loc 3
01110111 # jump back by 2^7 to a_loop

01111111 # (HALT)








