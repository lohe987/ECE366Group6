01001001 #achieve the number 6
01001001
01001001
01001001
01001001
01001001
01010000 #set $r0 to memory location 0x0000
00011000 #6 is now in memory location 0x0000

01001001 #achieve the number 17
01001001
01001001
01001001
01001001
01001001
01001001
01001001
01001001
01001001
01001001
01010001 #set $r0 to memory location 0x0001
00011000 #17 is now in memory location 0x0001

01010000 #set $r0 to memory location 0x0000
01001101
01001101
01000011 #set $r0 to memory location 0x0002
00101101 #r3 is now set to 1
00101101 #r3 is reset to 0
00101001
00101001
00101001
00101001
00101001
00101001
00101001
00011000 #10 is now in memory location 0x0002

01010000 #set $r0 to memory location 0x0000
00001000 #pull 6 back out from memory















01000110
01001101
00100011
01111010 #decrement the counter by 1 then 2 then 3. . .
01110011 #if counter is 0 leave the loop

00101101
00101101
00101101
00101101
00101101
00101101 #reset r3 back to 0
01010000
01001101
01001101
01001101
01000011
00010100 #store product of 6 times larger numbrer in 0x0003
01010000
00101101
01000011 #set r0 to memory location 0x0002
00000100 #$r1 is now equal to 10
00101101
00100111
00010100 #decrement the counter and put it back in memory location 0x0002
00110111 #check to see if counter is less than 1
00101101
01010000
01001101
01001101
01001101
01000011
00001000 #load product of 6 times larger number in 0x0003
01011000
00101101
00101101
00101101 #reset r3
01001101
01001101
01001101
01001101
01000011 #memory 0x0004 has data value 0
00101101
00101101
00101101
00101101
00000100
01010000
01111010
01110110


01010000
01001101
01001101
01001101
01000011
00101101
00101101
00101101
00000100 #load in the big number from 0x0003
01010100
01000000
01000011
00101101
00001000 #load in 17 from 0x0001

 #mod 17
00100110
00110110
01111010
01110010

00010100 #answer is in memory location 0x0001